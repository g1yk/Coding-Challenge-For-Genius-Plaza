{"version":3,"sources":["logo.svg","NameDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","nameDetail","state","details","url","getDetails","a","async","axios","get","props","match","response","setState","data","console","log","this","height","name","mass","birth_year","className","Component","App","loading","results","undefined","getNames","e","then","catch","error","showNames","index","map","eachResult","key","to","href","exact","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,6NCGtBC,E,2MAEjBC,MAAQ,CACJC,QAAS,GACTC,IAAK,I,EAOTC,WAAa,0BAAAC,EAAAC,OAAA,wFAAAD,EAAA,MAEYE,IAAMC,IAAN,UAFZ,wBAEY,OAAsB,EAAKC,MAAMC,MAAMP,OAFnD,OAELQ,EAFK,OAGT,EAAKC,SAAS,CAACV,QAASS,EAASE,KAAMV,IAAK,EAAKM,MAAMC,MAAMP,MAC7DW,QAAQC,IAAI,EAAKd,MAAMC,SAJd,sC,mFAHTc,KAAKZ,e,+BAWDY,KAAKf,MAAME,MAAQa,KAAKP,MAAMC,MAAMP,KACpCa,KAAKZ,aAFJ,MAKsCY,KAAKf,MAAMC,QAA9Ce,EALH,EAKGA,OAAQC,EALX,EAKWA,KAAMC,EALjB,EAKiBA,KAAMC,EALvB,EAKuBA,WAE5B,OACI,6BAEI,yBAAKC,UAAU,SACX,6BAEA,2BAAOA,UAAU,SACb,gCACA,+BAEI,4BACI,4BAAI,mCAAJ,KACA,4BAAKH,IAET,4BACI,uCACA,gCAAMD,EAAN,MAEJ,4BACI,qCACA,4BAAKE,IAET,4BACI,2CACA,4BAAKC,Y,GAjDGE,aCMnBC,E,2MAInBtB,MAAQ,CACNuB,SAAS,EACTC,aAASC,EACTxB,aAASwB,G,EAYXC,SAAW,SAAOC,GAAP,SAAAvB,EAAAC,OAAA,gDACTQ,QAAQC,IAAI,8BACER,IAAMC,IAAN,gCACXqB,MAAK,SAAAlB,GACJ,IAAME,EAAOF,EAASE,KACtBC,QAAQC,IAAI,OAAQF,GAEpB,EAAKD,SAAS,CACZa,QAASZ,EAAKY,aAIjBK,OAAM,SAAAC,GACLjB,QAAQiB,MAAM,uBAAwBA,EAAMpB,aAbvC,sC,EAqBXqB,UAAY,SAACC,GAEX,GAAI,EAAKhC,MAAMwB,QAIb,OAHAX,QAAQC,IAAI,EAAKd,MAAMwB,SAEZ,YAAO,EAAKxB,MAAMwB,SACdS,KAAI,SAACC,EAAYF,GAC9B,OAAO,wBAAIG,IAAKH,GACd,kBAAC,IAAD,CAAMZ,UAAU,yCAAyCgB,GAAE,kBAAaJ,EAAQ,IAAhF,IAAuFE,EAAWjB,W,mFAlCxGF,KAAKW,a,+BA4CL,OAUI,6BAEE,yBAAKN,UAAU,sCACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,eAAeiB,KAAK,KAAjC,qBAIJ,yBAAKjB,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,kBAQrB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SAASL,KAAKgB,cAIjC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,cAClBC,OAAQ,SAAChC,GAAD,OAAW,kBAAC,EAAeA,W,GA7FVa,aCGboB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnC,MACvB,2DCVNoC,IAASL,OACL,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFM,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.5cb69ae9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport axios from 'axios'\n\nexport default class nameDetail extends Component {\n\n    state = {\n        details: {},\n        url: '',\n    }\n\n    componentDidMount() {\n        this.getDetails();\n    }\n\n    getDetails = async () => {\n        const apiUrl = `https://swapi.co/api`;\n        let response = await axios.get(`${apiUrl}${this.props.match.url}`);\n        this.setState({details: response.data, url: this.props.match.url});\n        console.log(this.state.details)          \n    };\n\n    render() {\n        if (this.state.url !== this.props.match.url) {\n            this.getDetails();\n        }\n      \n        const { height, name, mass, birth_year } = this.state.details;\n        \n        return (\n            <div>\n\n                <div className=\"col-7\">\n                    <h1></h1>\n\n                    <table className=\"table\">\n                        <thead></thead>\n                        <tbody>\n\n                            <tr>\n                                <td><b>Name</b> </td>\n                                <td>{name}</td>\n                            </tr>\n                            <tr>\n                                <td>Height </td>\n                                <td> {height} </td>\n                            </tr>\n                            <tr>\n                                <td>Mass </td>\n                                <td>{mass}</td>\n                            </tr>\n                            <tr>\n                                <td>Birth year </td>\n                                <td>{birth_year}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios'\nimport { Link, Route } from 'react-router-dom';\nimport NameDetail from './NameDetail';\n\n\n\nexport default class App extends Component {\n\n\n\n  state = {\n    loading: true,\n    results: undefined,\n    details: undefined,\n  }\n\n\n\n  componentDidMount() {\n\n    this.getNames()\n\n  }\n\n\n  getNames = async (e) => {\n    console.log('calling get Names function')\n    let request = axios.get(`https://swapi.co/api/people/`)\n      .then(response => {\n        const data = response.data;\n        console.log('data', data);\n\n        this.setState({\n          results: data.results\n        })\n\n      })\n      .catch(error => {\n        console.error('create student error', error.response)\n        // alert(JSON.stringify(error.response.data))\n      })\n  }\n\n\n\n\n  showNames = (index) => {\n\n    if (this.state.results) {\n      console.log(this.state.results)\n\n      let results = [...this.state.results]\n      return results.map((eachResult, index) => {\n        return <li key={index}>\n          <Link className=\"list-group-item list-group-item-action\" to={`/people/${index + 1}`}> {eachResult.name}</Link>\n        </li>\n      })\n    }\n  }\n\n\n\n\n  render() {\n    return (\n\n\n\n\n\n\n\n  \n\n        <div>\n\n          <nav className=\"navbar navbar-dark bg-primary mb-3\">\n            <div className=\"container\">\n              <a className=\"navbar-brand\" href=\"/\">StarWars People</a>\n            </div>\n          </nav>\n\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-5\">\n                <div className=\"list-group\">\n\n                </div>\n              </div>\n            </div>\n          </div>\n\n\n          <div className=\"row\">\n            <div className=\"col-5\">{this.showNames()}</div>\n\n          </div>\n\n        <Route exact path=\"/people/:id\" \n        render={(props) => <NameDetail {...props}  />}\n    />\n        \n          </div>\n\n\n\n    \n\n\n        )\n      }\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n"],"sourceRoot":""}